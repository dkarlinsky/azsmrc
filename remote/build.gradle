buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'edu.sc.seis.gradle:launch4j:2.3.0'
        classpath "com.github.jengelman.gradle.plugins:shadow:2.0.1"
    }
}

apply plugin: 'edu.sc.seis.launch4j'
apply plugin: "com.github.johnrengelman.shadow"

shadowJar {
    exclude 'a2.properties'
}

configurations {
    win32
}

def bits = System.getProperty("bits")?:"64"
def winArch = "x86_64"
if(bits == "32") {
    winArch = "x86"
}
else {
    winArch = "x86_$bits"
}

launch4j {
//    println("roject.tasks.shadowJar.outputs.files: $project.tasks.shadowJar.outputs.files")
    mainClassName = 'lbms.azsmrc.remote.client.swtgui.RCMain'
    icon = "${project.rootDir}/remote/native/windows/Azureus_32x32x256.ico"
    copyConfigurable = project.tasks.shadowJar.outputs.files
    outfile = "AzSmrc-${winArch}.exe"
    jar = "lib/${project.tasks.shadowJar.archiveName}"
}

shadowJar {
    configurations = [project.configurations.runtime, project.configurations.win32]
    dependencies {
        exclude(dependency('org.eclipse.swt:org.eclipse.swt.cocoa.macosx.x86_64:'))
        exclude(dependency('org.apache.ant::'))
//        exclude(dependency {
//          println "dependency $it"
//        })
    }
    manifest {
        attributes 'Main-Class': 'lbms.azsmrc.remote.client.swtgui.RCMain'
    }
}



dependencies {
    compile project(':shared')
    win32  group: 'org.eclipse.swt', name: "org.eclipse.swt.win32.win32.$winArch", version: '4.3'
}

task packageMac(type: Tar, dependsOn: ['jar']) {

    archiveName "AzSmrc.${version}.app.tar"

    from ("native/macos/app-template") {

        into 'AzSmrc.app/Contents'

        include "**"
        exclude 'Info.plist.template'
        exclude '**/start.template'
        exclude '**/placeholder.txt'
    }

    from ("native/macos/app-template/Info.plist.template") {

        into 'AzSmrc.app/Contents'
        expand(version: version, classpath: '')
        rename { 'Info.plist' }

    }

    from ("native/macos/app-template/MacOS/start.template") {

        def cp = (jar.outputs.files +
                configurations.compile
                        .filter { !it.name.startsWith("Vuze") && !it.name.startsWith("ant") })
                .collect { "\$JAVAROOT/${it.name}" } .join(":")

        println("classpath: $cp")

        into 'AzSmrc.app/Contents/MacOS'
        expand(version: version,
                classpath: cp )
        rename { 'start' }

        fileMode = 0755

    }

    from (configurations.compile) {
        into 'AzSmrc.app/Contents/Resources/Java'
        exclude 'ant*'
        exclude 'Vuze*.jar'
    }

    from (jar.outputs) {
        into 'AzSmrc.app/Contents/Resources/Java'
    }

    destinationDir buildDir

}
